WHITESPACE = _{ " " }
NEWLINE = _{ "\n" | "\r\n" }
COMMENT = _{ ";" ~ (!NEWLINE ~ ANY)* }

instruction = _{ mov | add | sub | mul | div | jmp | cmp | label }

program = { SOI ~ (instruction ~ (NEWLINE | COMMENT)*)* ~ EOI }

mov = { "mov" ~ operand ~ "," ~ operand }
add = { "add" ~ operand ~ "," ~ operand }
sub = { "sub" ~ operand ~ "," ~ operand }
mul = { "mul" ~ operand }
div = { "div" ~ operand }
jmp = { "jmp" ~ name }
cmp = { "cmp" ~ operand ~ "," ~ operand }

name = { ASCII_ALPHANUMERIC+ }
label = { ASCII_ALPHANUMERIC+ ~ ":" }
operand = { register | number }

/// NOT Silent: Parser generates inner Pair including "rule:register"
register = { "ax" | "bx" | "cx" | "dx" | "sp" | "bp" | "si" | "di" | "cs" | "ds" | "es" | "ss" }
/// Silent rule: inner pair has Rule::hex or Rule::digit. inner pari does not have Rule::number.
number = _{ hex | digit }
/// Atomic rule: No whitespace between 0x and others
hex = @{ "0x" ~ (ASCII_DIGIT | "a" | "b" | "c" | "d" | "e" | "f")+ }
digit = { ASCII_DIGIT+ }
