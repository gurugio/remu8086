WHITESPACE = _{ " " }
NEWLINE = _{ "\n" | "\r\n" }
COMMENT = _{ ";" ~ (!NEWLINE ~ ANY)* }

program = { SOI ~ (instruction ~ (NEWLINE | COMMENT)*)* ~ EOI }

instruction = _{ mov | add | sub | mul | div | jmp | cmp | label | org }
mov = { "mov" ~ operand ~ "," ~ operand }
add = { "add" ~ operand ~ "," ~ operand }
sub = { "sub" ~ operand ~ "," ~ operand }
mul = { "mul" ~ operand }
div = { "div" ~ operand }
jmp = { "jmp" ~ name }
cmp = { "cmp" ~ operand ~ "," ~ operand }
org = { "org" ~ imm }

name = { ASCII_ALPHANUMERIC+ }
label = { ASCII_ALPHANUMERIC+ ~ ":" }
operand = _{ register | imm | mem }

/// Operand should be parsed into reg8/reg16/imm.
/// So register and number are defined as the silent rule.
register = _{ reg8 | reg16 }
reg16 = { "ax" | "bx" | "cx" | "dx" | "sp" | "bp" | "si" | "di" | "cs" | "ds" | "es" | "ss" }
reg8 = { "ah" | "al" | "bh" | "bl" | "ch" | "cl" | "dh" | "dl" }

/// Allow only HEX digit in assembly code
/// Atomic rule: No whitespace between 0x and others
/// Three hex digit form: 0xabcd, 0abcdh, 1abch
imm = @{ "0x" ~ hex+ | "0" ~ ("a" | "b" | "c" | "d" | "e" | "f")+ ~ hex* ~ "h" | ASCII_DIGIT ~ hex* ~ "h" }

mem = _{ memx | mem8 | mem16 }
memx = @{ "[" ~ imm ~ "]" }
mem8 = { "byte ptr" ~ memx }
mem16 = { "word ptr" ~ memx }

hex = @{ ASCII_DIGIT | "a" | "b" | "c" | "d" | "e" | "f" }
